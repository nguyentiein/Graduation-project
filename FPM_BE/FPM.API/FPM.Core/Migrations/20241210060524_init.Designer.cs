// <auto-generated />
using System;
using FPM.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPM.Core.Migrations
{
    [DbContext(typeof(FPMContext))]
    [Migration("20241210060524_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FPM.Core.Entities.Approved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Result")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbl_Approved", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Broadcasting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("broadcasting_id");

                    b.Property<DateTime?>("BroadcastingTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("PostProductionPlaningId")
                        .HasColumnType("int");

                    b.Property<string>("Reciever")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("SubmissionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PostProductionPlaningId");

                    b.ToTable("tbl_Broadcasting", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Broadcastingdocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BroadcastingId")
                        .HasColumnType("int");

                    b.Property<int?>("UploadPartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BroadcastingId");

                    b.HasIndex("UploadPartId");

                    b.ToTable("tbl_Broadcastingdocument", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Commoncategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commonCategory_id");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("tbl_Commoncategory", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AllowFileType")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogDir")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("MaxFileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("PageSize")
                        .HasColumnType("int");

                    b.Property<int?>("TokenExpire")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbl_Config", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DocName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DocType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocType");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Document", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.DocumentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("UploadPartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UploadPartId");

                    b.ToTable("tbl_DocumentFile", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Estimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CameramanFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DirectorFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<decimal>("EditorFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("HumanResourceEstimate")
                        .HasColumnType("decimal(12,4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("OtherResourceEstimate")
                        .HasColumnType("decimal(12,4)");

                    b.Property<int?>("Phase")
                        .HasColumnType("int");

                    b.Property<int?>("PreProductPlaningId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProducerFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ScriptFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TaskName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("TimeEstimate")
                        .HasColumnType("decimal(12,4)");

                    b.Property<string>("TypeFilm")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PreProductPlaningId")
                        .IsUnique();

                    b.ToTable("tbl_Estimate", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(38)
                        .IsUnicode(false)
                        .HasColumnType("varchar(38)")
                        .HasColumnName("ID");

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("CLIENT_IP");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("EXCEPTION_MESSAGE");

                    b.Property<string>("ExceptionStackTrace")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("EXCEPTION_STACK_TRACE");

                    b.Property<bool>("HasException")
                        .HasPrecision(1)
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("HAS_EXCEPTION");

                    b.Property<string>("Node")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NODE");

                    b.Property<string>("RequestBody")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("REQUEST_BODY");

                    b.Property<string>("RequestContentType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("REQUEST_CONTENT_TYPE");

                    b.Property<DateTime>("RequestDatetimeUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("REQUEST_DATETIME_UTC");

                    b.Property<string>("RequestHost")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("REQUEST_HOST");

                    b.Property<string>("RequestMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("REQUEST_METHOD");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("REQUEST_PATH");

                    b.Property<string>("RequestQuery")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("REQUEST_QUERY");

                    b.Property<string>("ResponseBody")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("RESPONSE_BODY");

                    b.Property<string>("ResponseContentType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RESPONSE_CONTENT_TYPE");

                    b.Property<DateTime>("ResponseDatetimeUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RESPONSE_DATETIME_UTC");

                    b.Property<string>("ResponseStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("RESPONSE_STATUS");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TRACE_ID");

                    b.HasKey("Id");

                    b.ToTable("tbl_Log", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Notify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActionType")
                        .HasColumnType("int")
                        .HasComment("1-Tao moi\r\n2-Sua\r\n3-Xoa\r\n4-Duyet\r\n5-Tu choi Duyet");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int")
                        .HasComment("1-De tai\r\n2-De cuong\r\n3-Ke hoach tien san xuat\r\n4-Duyet  ket thuc san xuat tien ky\r\n5-Ke hoach hau ky\r\n6-Duyet ket thuc san xuat hau ky\r\n7-Duyet phim");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("0-new\r\n1- Da xem\r\n2-Da xu ly");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Notify", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.PostproductionPlaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CloseNote")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("CloseReason")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("OtherFee")
                        .HasColumnType("decimal(14,2)");

                    b.Property<int?>("PreProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkContent")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("PreProductionId")
                        .IsUnique();

                    b.HasIndex(new[] { "PreProductionId" }, "FK_postproduction_planing_preproduction_planing_idx");

                    b.ToTable("tbl_Postproduction_planing", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionEstimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("preproduction_estimate_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("PreProductionId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex(new[] { "PreProductionId" }, "FK_preproduction_estimate_preproduction_planing_idx");

                    b.HasIndex(new[] { "SegmentId" }, "FK_preproduction_estimate_preproduction_segment_idx");

                    b.ToTable("tbl_Preproduction_estimate", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PreProductionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SalaryType")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWorkingHour")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PreProductionId" }, "FK_preproduction_member_preproduction_planing_idx");

                    b.HasIndex(new[] { "MemberId" }, "FK_preproduction_member_user_idx");

                    b.ToTable("tbl_preproductionMember", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionPlaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedMember")
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(14,2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CloseExpense")
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("CloseNote")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("CloseReason")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Scenario")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "TeamId" }, "FK_preproduction_planing_team_idx");

                    b.HasIndex(new[] { "TopicId" }, "FK_preproduction_planing_topic_idx");

                    b.HasIndex(new[] { "ApprovedMember" }, "FK_preproduction_planing_user_idx");

                    b.ToTable("tbl_preproduction_planing", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("PreProductionId")
                        .HasColumnType("int");

                    b.Property<string>("Scenario")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PreProductionId" }, "FK_preproduction_segment_preproduction_planing_idx");

                    b.ToTable("tblPreproduction_segment", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionsegmentMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("PlanMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PreProductionSegmentId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WorkingHour")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlanMemberId");

                    b.HasIndex(new[] { "PreProductionSegmentId" }, "FK_preproductionsegment_member_preproduction_segment_idx");

                    b.HasIndex(new[] { "UserId" }, "FK_preproductionsegment_member_user_idx");

                    b.ToTable("tbl_Preproductionsegment_member", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TBL_Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Quản trị hệ thống",
                            Name = "Quản trị viên",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Người lên ý tưởng và chỉ đạo sản xuất bộ phim",
                            Name = "Đạo diễn",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Người quản lý các chi phí, nhân sự trong đoàn phim",
                            Name = "Giám đốc sản xuất",
                            Type = 5
                        },
                        new
                        {
                            Id = 4,
                            Description = "Người chịu trách nghiệm về kịch bản",
                            Name = "Biên kịch",
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Người quay phim",
                            Name = "Quay phim",
                            Type = 4
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lãnh đạo xưởng phim",
                            Name = "Lãnh đạo",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Người biên tập",
                            Name = "Biên tập viên",
                            Type = 6
                        });
                });

            modelBuilder.Entity("FPM.Core.Entities.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Scene_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("EditBudget")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PreproductionId")
                        .HasColumnType("int");

                    b.Property<int?>("PreproductionSegmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PreproductionSegmentId");

                    b.ToTable("TBL_Scene", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.SceneExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Scene_expense_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<int?>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("SceneId");

                    b.ToTable("TBL_Scene_Expense", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LeaderId" }, "FK_team_user_idx");

                    b.ToTable("tbl_Team", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Role")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "FK_team_member_team_idx");

                    b.HasIndex(new[] { "UserId" }, "FK_team_member_user_idx");

                    b.ToTable("tbl_Team_member", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("EstimatedBegin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EstimatedBroadcasting")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("EstimatedBudget")
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTime?>("EstimatedEnd")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Scenario")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("tbl_Topic", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.TopicDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApproveBy")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<int?>("UploadPartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadPartId");

                    b.HasIndex(new[] { "TopicId" }, "FK_topic_document_topic_idx");

                    b.ToTable("tbl_Topic_document", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.TopicMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TopicId" }, "FK_topic_member_topic_idx");

                    b.HasIndex(new[] { "MemberId" }, "FK_topic_member_user_idx");

                    b.ToTable("tbl_Topic_member", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.UploadPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileLocation")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FileName")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("NumberOfChunks")
                        .HasColumnType("int");

                    b.Property<string>("Snapshot")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("TimeBeginUpload")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeFinishUpload")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TokenId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("tbl_UploadPart", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DepartId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PassWord")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("1-Active; -1 -Delete");

                    b.Property<string>("Tel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartId" }, "user_depart_idx");

                    b.ToTable("tbl_User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PassWord = "123456",
                            Status = 1,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin@gmail.com",
                            FirstName = "abc",
                            LastName = "abc",
                            PassWord = "123456",
                            Status = 1,
                            UserName = "Leader"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@gmail.com",
                            FirstName = "abc",
                            LastName = "abc",
                            PassWord = "123456",
                            Status = 1,
                            UserName = "Director"
                        },
                        new
                        {
                            Id = 4,
                            Email = "admin@gmail.com",
                            FirstName = "abc",
                            LastName = "abc",
                            PassWord = "123456",
                            Status = 1,
                            UserName = "Scriptor"
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin@gmail.com",
                            FirstName = "abc",
                            LastName = "abc",
                            PassWord = "123456",
                            Status = 1,
                            UserName = "Producer"
                        });
                });

            modelBuilder.Entity("FPM.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TBL_User_role", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("FPM.Core.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UploadPartId")
                        .HasColumnType("int");

                    b.Property<decimal?>("VideoLength")
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("VideoName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("VideoSize")
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("UploadPartId");

                    b.ToTable("tbl_Video", (string)null);
                });

            modelBuilder.Entity("FPM.Core.Entities.ViewReport", b =>
                {
                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<string>("Director")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("EstimateFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("FactFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.ToView(null);
                });

            modelBuilder.Entity("FPM.Core.Entities.Broadcasting", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "Channel")
                        .WithMany("Broadcastings")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("FK_broadcasting_commoncategory");

                    b.HasOne("FPM.Core.Entities.PostproductionPlaning", "PostProductionPlaning")
                        .WithMany("Broadcastings")
                        .HasForeignKey("PostProductionPlaningId")
                        .IsRequired()
                        .HasConstraintName("FK_broadcasting_postproduction_planing");

                    b.Navigation("Channel");

                    b.Navigation("PostProductionPlaning");
                });

            modelBuilder.Entity("FPM.Core.Entities.Broadcastingdocument", b =>
                {
                    b.HasOne("FPM.Core.Entities.Broadcasting", "Broadcasting")
                        .WithMany("Broadcastingdocuments")
                        .HasForeignKey("BroadcastingId")
                        .IsRequired()
                        .HasConstraintName("FK_broadcastingdocument_broadcasting");

                    b.HasOne("FPM.Core.Entities.UploadPart", "UploadPart")
                        .WithMany("Broadcastingdocuments")
                        .HasForeignKey("UploadPartId")
                        .HasConstraintName("FK_broadcastingdocument_UploadPart");

                    b.Navigation("Broadcasting");

                    b.Navigation("UploadPart");
                });

            modelBuilder.Entity("FPM.Core.Entities.Commoncategory", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_commoncategory_Parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FPM.Core.Entities.Document", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "DocTypeNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("DocType")
                        .HasConstraintName("FK_Document_commoncategory");

                    b.HasOne("FPM.Core.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document_user");

                    b.Navigation("DocTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPM.Core.Entities.DocumentFile", b =>
                {
                    b.HasOne("FPM.Core.Entities.Document", "Document")
                        .WithMany("DocumentFiles")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_DocumentFile_Document");

                    b.HasOne("FPM.Core.Entities.UploadPart", "UploadPart")
                        .WithMany("DocumentFiles")
                        .HasForeignKey("UploadPartId")
                        .HasConstraintName("FK_DocumentFile_UploadPart");

                    b.Navigation("Document");

                    b.Navigation("UploadPart");
                });

            modelBuilder.Entity("FPM.Core.Entities.Estimate", b =>
                {
                    b.HasOne("FPM.Core.Entities.User", "CreatedByNavigation")
                        .WithMany("Estimates")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_estimate_user");

                    b.HasOne("FPM.Core.Entities.PreproductionPlaning", "PreProductPlaning")
                        .WithOne("Estimate")
                        .HasForeignKey("FPM.Core.Entities.Estimate", "PreProductPlaningId")
                        .HasConstraintName("FK_estimate_preproduction_planing");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("PreProductPlaning");
                });

            modelBuilder.Entity("FPM.Core.Entities.Notify", b =>
                {
                    b.HasOne("FPM.Core.Entities.User", "Sender")
                        .WithMany("NotifySenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_notify_user");

                    b.HasOne("FPM.Core.Entities.User", "User")
                        .WithMany("NotifyUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_notify_user1");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPM.Core.Entities.PostproductionPlaning", b =>
                {
                    b.HasOne("FPM.Core.Entities.PreproductionPlaning", "PreProduction")
                        .WithOne("PostproductionPlaning")
                        .HasForeignKey("FPM.Core.Entities.PostproductionPlaning", "PreProductionId")
                        .HasConstraintName("FK_postproduction_planing_preproduction_planing");

                    b.Navigation("PreProduction");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionEstimate", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "ExpenseType")
                        .WithMany("PreproductionEstimates")
                        .HasForeignKey("ExpenseTypeId")
                        .HasConstraintName("FK_preproduction_estimate_commoncategory");

                    b.HasOne("FPM.Core.Entities.PreproductionPlaning", "PreProduction")
                        .WithMany("PreproductionEstimates")
                        .HasForeignKey("PreProductionId")
                        .HasConstraintName("FK_preproduction_estimate_preproduction_planing");

                    b.HasOne("FPM.Core.Entities.PreproductionSegment", "Segment")
                        .WithMany("PreproductionEstimates")
                        .HasForeignKey("SegmentId")
                        .HasConstraintName("FK_preproduction_estimate_preproduction_segment");

                    b.Navigation("ExpenseType");

                    b.Navigation("PreProduction");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionMember", b =>
                {
                    b.HasOne("FPM.Core.Entities.User", "Member")
                        .WithMany("PreproductionMembers")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_preproduction_member_user");

                    b.HasOne("FPM.Core.Entities.PreproductionPlaning", "PreProduction")
                        .WithMany("PreproductionMembers")
                        .HasForeignKey("PreProductionId")
                        .HasConstraintName("FK_preproduction_member_preproduction_planing");

                    b.Navigation("Member");

                    b.Navigation("PreProduction");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionPlaning", b =>
                {
                    b.HasOne("FPM.Core.Entities.User", "ApprovedMemberNavigation")
                        .WithMany("PreproductionPlanings")
                        .HasForeignKey("ApprovedMember")
                        .HasConstraintName("FK_preproduction_planing_user");

                    b.HasOne("FPM.Core.Entities.Commoncategory", "Category")
                        .WithMany("PreproductionPlanings")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_preproduction_planing_commoncategory");

                    b.HasOne("FPM.Core.Entities.Team", "Team")
                        .WithMany("PreproductionPlanings")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_preproduction_planing_team");

                    b.HasOne("FPM.Core.Entities.Topic", "Topic")
                        .WithMany("PreproductionPlanings")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_preproduction_planing_topic");

                    b.Navigation("ApprovedMemberNavigation");

                    b.Navigation("Category");

                    b.Navigation("Team");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionSegment", b =>
                {
                    b.HasOne("FPM.Core.Entities.PreproductionPlaning", "PreProduction")
                        .WithMany("PreproductionSegments")
                        .HasForeignKey("PreProductionId")
                        .HasConstraintName("FK_preproduction_segment_preproduction_planing");

                    b.Navigation("PreProduction");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionsegmentMember", b =>
                {
                    b.HasOne("FPM.Core.Entities.PreproductionMember", "PreproductionMember")
                        .WithMany("SegmentMembers")
                        .HasForeignKey("PlanMemberId")
                        .HasConstraintName("PK_SegmentMember_PreproductionMember");

                    b.HasOne("FPM.Core.Entities.PreproductionSegment", "PreProductionSegment")
                        .WithMany("PreproductionsegmentMembers")
                        .HasForeignKey("PreProductionSegmentId")
                        .HasConstraintName("FK_preproductionsegment_member_preproduction_segment");

                    b.HasOne("FPM.Core.Entities.User", "User")
                        .WithMany("PreproductionsegmentMembers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_preproductionsegment_member_user");

                    b.Navigation("PreProductionSegment");

                    b.Navigation("PreproductionMember");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPM.Core.Entities.Scene", b =>
                {
                    b.HasOne("FPM.Core.Entities.PreproductionSegment", "PreproductionSegment")
                        .WithMany("Scenes")
                        .HasForeignKey("PreproductionSegmentId")
                        .HasConstraintName("FK_Scene_PreproductionSegment");

                    b.Navigation("PreproductionSegment");
                });

            modelBuilder.Entity("FPM.Core.Entities.SceneExpense", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId");

                    b.HasOne("FPM.Core.Entities.Scene", "Scene")
                        .WithMany("SceneExpenses")
                        .HasForeignKey("SceneId")
                        .HasConstraintName("FK_SceneExpense_Scense");

                    b.Navigation("ExpenseType");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("FPM.Core.Entities.Team", b =>
                {
                    b.HasOne("FPM.Core.Entities.User", "Leader")
                        .WithMany("Teams")
                        .HasForeignKey("LeaderId")
                        .HasConstraintName("FK_team_user");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("FPM.Core.Entities.TeamMember", b =>
                {
                    b.HasOne("FPM.Core.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_team_member_team");

                    b.HasOne("FPM.Core.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_team_member_user");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPM.Core.Entities.Topic", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_topic_commoncategory");

                    b.HasOne("FPM.Core.Entities.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_topic_user");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPM.Core.Entities.TopicDocument", b =>
                {
                    b.HasOne("FPM.Core.Entities.Topic", "Topic")
                        .WithMany("TopicDocuments")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_topic_document_topic");

                    b.HasOne("FPM.Core.Entities.UploadPart", "UploadPart")
                        .WithMany("TopicDocuments")
                        .HasForeignKey("UploadPartId")
                        .HasConstraintName("FK_topic_document_UploadPart");

                    b.Navigation("Topic");

                    b.Navigation("UploadPart");
                });

            modelBuilder.Entity("FPM.Core.Entities.TopicMember", b =>
                {
                    b.HasOne("FPM.Core.Entities.User", "Member")
                        .WithMany("TopicMembers")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_topic_member_user");

                    b.HasOne("FPM.Core.Entities.Topic", "Topic")
                        .WithMany("TopicMembers")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_topic_member_topic");

                    b.Navigation("Member");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPM.Core.Entities.User", b =>
                {
                    b.HasOne("FPM.Core.Entities.Commoncategory", "Depart")
                        .WithMany("Users")
                        .HasForeignKey("DepartId")
                        .HasConstraintName("user_depart");

                    b.Navigation("Depart");
                });

            modelBuilder.Entity("FPM.Core.Entities.UserRole", b =>
                {
                    b.HasOne("FPM.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPM.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPM.Core.Entities.Video", b =>
                {
                    b.HasOne("FPM.Core.Entities.UploadPart", "UploadPart")
                        .WithMany("Videos")
                        .HasForeignKey("UploadPartId")
                        .HasConstraintName("FK_video_UploadPart");

                    b.Navigation("UploadPart");
                });

            modelBuilder.Entity("FPM.Core.Entities.Broadcasting", b =>
                {
                    b.Navigation("Broadcastingdocuments");
                });

            modelBuilder.Entity("FPM.Core.Entities.Commoncategory", b =>
                {
                    b.Navigation("Broadcastings");

                    b.Navigation("Children");

                    b.Navigation("Documents");

                    b.Navigation("PreproductionEstimates");

                    b.Navigation("PreproductionPlanings");

                    b.Navigation("Topics");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPM.Core.Entities.Document", b =>
                {
                    b.Navigation("DocumentFiles");
                });

            modelBuilder.Entity("FPM.Core.Entities.PostproductionPlaning", b =>
                {
                    b.Navigation("Broadcastings");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionMember", b =>
                {
                    b.Navigation("SegmentMembers");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionPlaning", b =>
                {
                    b.Navigation("Estimate");

                    b.Navigation("PostproductionPlaning");

                    b.Navigation("PreproductionEstimates");

                    b.Navigation("PreproductionMembers");

                    b.Navigation("PreproductionSegments");
                });

            modelBuilder.Entity("FPM.Core.Entities.PreproductionSegment", b =>
                {
                    b.Navigation("PreproductionEstimates");

                    b.Navigation("PreproductionsegmentMembers");

                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("FPM.Core.Entities.Scene", b =>
                {
                    b.Navigation("SceneExpenses");
                });

            modelBuilder.Entity("FPM.Core.Entities.Team", b =>
                {
                    b.Navigation("PreproductionPlanings");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FPM.Core.Entities.Topic", b =>
                {
                    b.Navigation("PreproductionPlanings");

                    b.Navigation("TopicDocuments");

                    b.Navigation("TopicMembers");
                });

            modelBuilder.Entity("FPM.Core.Entities.UploadPart", b =>
                {
                    b.Navigation("Broadcastingdocuments");

                    b.Navigation("DocumentFiles");

                    b.Navigation("TopicDocuments");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("FPM.Core.Entities.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Estimates");

                    b.Navigation("NotifySenders");

                    b.Navigation("NotifyUsers");

                    b.Navigation("PreproductionMembers");

                    b.Navigation("PreproductionPlanings");

                    b.Navigation("PreproductionsegmentMembers");

                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("TopicMembers");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
